plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.hibernate.orm' version '6.6.22.Final'
    id 'org.graalvm.buildtools.native' version '0.10.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.hjk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.kafka:spring-kafka'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.postgresql:postgresql'

    // JSON
    implementation 'com.google.code.gson:gson:2.9.0'

    // AMP
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('jar') {
    enabled = false
}

tasks.named('asciidoctor') {
    sourceDir 'src/main/docs/asciidoc'
    inputs.dir(snippetsDir)
    attributes "snippets": snippetsDir, "encoding": "UTF-8"
    dependsOn(tasks.named("test"))
    doFirst {
        delete(file("src/main/resources/static/docs"))
    }
    doLast {
        copy {
            from("build/docs/asciidoc")
            into("src/main/resources/static/docs")
        }
    }
}

//
//tasks.named("build") {
//    dependsOn(tasks.named("asciidoctor"))
//}

// k6 부하 테스트 자동화를 위한 태스크
task generateK6Scripts(dependsOn: test) {
    description = 'Generates a single k6 load test script from all Spring REST Docs snippets.'
    group = 'k6'

    doLast {
        def snippetsDir = file("build/generated-snippets")
        def k6ScriptsDir = file("src/test/k6")
        def combinedScriptFile = file("${k6ScriptsDir}/combined-test.js")

        if (!k6ScriptsDir.exists()) {
            k6ScriptsDir.mkdirs()
            println "Created directory: ${k6ScriptsDir}"
        }

        if (!snippetsDir.exists() || !snippetsDir.isDirectory()) {
            println "Snippets directory not found. Skipping k6 script generation."
            return
        }

        def scenarios = []
        def functions = []

        snippetsDir.eachDir { snippetDir ->
            def curlFile = file("${snippetDir}/curl-request.adoc")
            if (curlFile.exists()) {
                def curlCommand = curlFile.text.replace('\$ ', '').replaceAll('(?m)^\\s*|\\s*$', '').replace(' \\', '')

                def method = (curlCommand =~ /-X\\s+(\\w+)/).find() ? (curlCommand =~ /-X\\s+(\\w+)/)[0][1].toLowerCase() : 'get'

                def baseUrl = System.getenv('K6_TARGET_HOST') ?: 'http://localhost:8080'
                def path = (curlCommand =~ /'http:\/\/localhost:8080([^']*)'/).find() ? (curlCommand =~ /'http:\/\/localhost:8080([^']*)'/)[0][1] : ''

                // Use backticks for the body to handle complex JSON strings safely
                def bodyMatch = (curlCommand =~ /-d\\s+'([^']*)'/)
                def body = bodyMatch.find() ? "`${bodyMatch[0][1]}`" : 'null'

                def headersList = []
                (curlCommand =~ /-H\\s+'([^']*)'/).each { match ->
                    def header = match[1]
                    def (key, value) = header.split(': ', 2)
                    headersList.add("'${key}': '${value}'")
                }
                def headers = headersList.isEmpty() ? '{}' : "{ ${headersList.join(', ')} }"

                def functionName = "test_${snippetDir.name.replaceAll('[^a-zA-Z0-9_]', '_')}"
                def k6HttpCall = (method == 'get' || method == 'del') ? "http.${method}(url, params);" : "http.${method}(url, payload, params);"

                // Add scenario entry
                scenarios.add("""
            ${functionName}: {
                executor: 'constant-vus',
                exec: '${functionName}',
                vus: 1,
                duration: '10s',
            }
            """.stripIndent())

                // Add test function
                functions.add("""
                export function ${functionName}() {
                    const url = '${baseUrl}${path}';
                    const params = { headers: ${headers} };
                    const payload = ${body};

                    const res = ${k6HttpCall}

                    check(res, {
                        'status is 200 on ${snippetDir.name}': (r) => r.status == 200,
                    });
                }
                """.stripIndent())
            }
        }

        if (scenarios.isEmpty()) {
            println "No valid snippets found to generate a k6 script."
            if (combinedScriptFile.exists()) {
                combinedScriptFile.delete()
            }
            return
        }

        def scriptContent = """
        import http from 'k6/http';
        import { check } from 'k6';

        export const options = {
            scenarios: {
                ${scenarios.join(',\n')}
            },
            thresholds: {
                http_req_failed: ['rate < 0.01'],  
                http_req_duration: ['p(95) < 500'], 
            },
        };

        ${functions.join('\n\n')}
        """.stripIndent()

        combinedScriptFile.write(scriptContent)
        println "Generated combined k6 script: ${combinedScriptFile}"
    }
}

task runK6LoadTest(type: Exec, dependsOn: generateK6Scripts) {
    description = 'Runs the combined k6 load test.'
    group = 'k6'

    workingDir 'src/test/k6'

    // Always run the specific combined test script
    commandLine 'k6', 'run', 'combined-test.js'

    doFirst {
        def k6ScriptFile = file('src/test/k6/combined-test.js')
        if (!k6ScriptFile.exists()) {
            throw new StopExecutionException("Combined k6 script not found. Run 'generateK6Scripts' task first.")
        }
    }
}
