# This is a basic workflow to help you get started with Actions

name: Spring Boot CI/CD with k6 Load Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Set up k6
      - name: Set up k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      # 4. Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 5. Build, Generate Docs and k6 Script
      - name: Build with Gradle and Generate Scripts
        run: ./gradlew build generateK6Scripts --info

      # 6. Start Application in Background
      - name: Start Application
        run: |
          java -jar build/libs/*.jar &
          
      # 7. Wait for Application to be ready
      - name: Wait for Application
        run: |
          echo "Waiting for application to start..."
          sleep 20
          
      # 8. Run k6 Load Test
      # This step will fail if the k6 thresholds are not met, stopping the pipeline.
      - name: Run k6 Load Test
        run: ./gradlew runK6LoadTest
        env:
          K6_TARGET_HOST: http://localhost:8080

#      # 7. Deploy (This step only runs if the k6 test passes)
#      - name: Deploy to Production
#        if: success()
#        run: |
#          echo "k6 load test passed! Starting deployment..."
#          # 여기에 실제 배포 스크립트를 추가합니다.
#          # 예:
#          # ./deploy-to-cloud.sh
#          # docker build -t my-app .
#          # docker push my-registry/my-app
#          echo "Deployment script would run here."
