name: Spring Boot CI/CD with k6 Load Test

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # 1.postgres 컨테이너 띄우기
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: hjk
          POSTGRES_USER: hjk
          POSTGRES_PASSWORD: star8903
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2.JDK 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3.K6 설치
      - name: Set up k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      # 4.gradlew 쓰기 권한 부여
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 5.API 명세서 작성, 자동 스크립트 생성
      - name: Build with Gradle and Generate Scripts
        run: ./gradlew build generateK6Scripts --info

      # 6. 스프링 부트 애플리케이션 시작
      - name: Start Application
        run: |
          # Redirect output to a log file to check for errors later
          java -jar build/libs/*.jar > app.log 2>&1 &
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/hjk
          SPRING_DATASOURCE_USERNAME: hjk
          SPRING_DATASOURCE_PASSWORD: star8903
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      # 7.애플리케이션 대기 & 헬스 체크
      - name: Wait for Application
        run: |
          echo "Waiting for application to start..."
          timeout=10
          while ! curl -s http://localhost:8080/actuator/health | grep UP; do
            if [ $timeout -le 0 ]; then
              echo "Application failed to start within 60 seconds."
              echo "--- Application Logs ---"
              cat app.log
              exit 1
            fi
            sleep 5
            timeout=$((timeout-5))
            echo "Still waiting... ($timeout s left)"
          done
          echo "Application started successfully!"
          echo "--- Application Logs (last 50 lines) ---"
          tail -n 50 app.log

      # 8.부하테스트 시작
      - name: Run k6 Load Test
        run: ./gradlew runK6LoadTest
        env:
          K6_TARGET_HOST: http://localhost:8080

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs

  # 9. 테스트 성공시 배포 시작
  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      - name: Setup SSH Key
        run: |
          set -eu
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.DEPLOY_SERVER_HOST }}" >> ~/.ssh/known_hosts

      - name: Copy JAR to server via scp
        run: scp build/libs/*.jar ${{ secrets.DEPLOY_SERVER_USERNAME }}@${{ secrets.DEPLOY_SERVER_HOST }}:/home/${{ secrets.DEPLOY_SERVER_USERNAME }}/app/

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          script: |
            # 배포 디렉토리 및 파일 경로 설정
            APP_DIR="/home/${{ secrets.DEPLOY_SERVER_USERNAME }}/app"
            JAR_FILE=$(ls -t $APP_DIR/*.jar | head -n 1)
            LOG_FILE="$APP_DIR/app.log"
            PROCESS_NAME=$(basename $JAR_FILE)

            echo "Deploying $PROCESS_NAME to $APP_DIR"

            # 기존에 실행 중인 애플리케이션 프로세스 찾기
            echo "Looking for existing process named $PROCESS_NAME"
            PID=$(pgrep -f $PROCESS_NAME)

            # 프로세스가 존재하면 종료
            if [ -n "$PID" ]; then
              echo "Stopping existing application with PID: $PID"
              kill -15 $PID
              # 프로세스가 완전히 종료될 때까지 잠시 대기
              for i in {1..10}; do
                if ! ps -p $PID > /dev/null; then
                  break
                fi
                echo "Waiting for process to stop..."
                sleep 1
              done
            fi

            echo "Starting new application from $JAR_FILE"
            
            # 앱과 DB가 모두 호스트에 직접 설치되어 있으므로 localhost 사용
            export SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/hjk
            export SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}
            export SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # nohup으로 백그라운드에서 애플리케이션 실행
            nohup java -jar $JAR_FILE > $LOG_FILE 2>&1 &

            echo "Deployment successful! Check logs at $LOG_FILE"
