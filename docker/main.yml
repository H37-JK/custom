name: Spring Boot CI/CD with k6 Load Test

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # 1.postgres 컨테이너 띄우기
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: hjk
          POSTGRES_USER: hjk
          POSTGRES_PASSWORD: star8903
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2.JDK 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3.K6 설치
      - name: Set up k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      # 4.gradlew 쓰기 권한 부여
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 5.API 명세서 작성, 자동 스크립트 생성
      - name: Build with Gradle and Generate Scripts
        run: ./gradlew build generateK6Scripts --info

      # 6. 스프링 부트 애플리케이션 시작
      - name: Start Application
        run: |
          # Redirect output to a log file to check for errors later
          java -jar build/libs/*.jar > app.log 2>&1 &
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/hjk
          SPRING_DATASOURCE_USERNAME: hjk
          SPRING_DATASOURCE_PASSWORD: star8903
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      # 7.애플리케이션 대기 & 헬스 체크
      - name: Wait for Application
        run: |
          echo "Waiting for application to start..."
          timeout=10
          while ! curl -s http://localhost:8080/actuator/health | grep UP; do
            if [ $timeout -le 0 ]; then
              echo "Application failed to start within 60 seconds."
              echo "--- Application Logs ---"
              cat app.log
              exit 1
            fi
            sleep 5
            timeout=$((timeout-5))
            echo "Still waiting... ($timeout s left)"
          done
          echo "Application started successfully!"
          echo "--- Application Logs (last 50 lines) ---"
          tail -n 50 app.log

      # 8.부하테스트 시작
      - name: Run k6 Load Test
        run: ./gradlew runK6LoadTest
        env:
          K6_TARGET_HOST: http://localhost:8080

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs

  # 9. 테스트 성공시 배포 시작
  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      #10.도커 설치
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      #11.도커 허브 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      #12.이미지 빌드 & 푸쉬
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/custom-app:${{ github.sha }}

      #13.원격 서버 연결
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USERNAME }}
          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          script: |
            set -e
            IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/custom-app"
            IMAGE_TAG="${{ github.sha }}"
            CONTAINER_NAME="custom-app"

            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

            echo "Pulling new image: $IMAGE_NAME:$IMAGE_TAG"
            docker pull "$IMAGE_NAME:$IMAGE_TAG"

            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                echo "Stopping and removing old container..."
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            echo "Running new container..."
            docker run -d --name $CONTAINER_NAME -p 8080:8080 \
              --add-host=host.docker.internal:host-gateway \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/hjk \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
              "$IMAGE_NAME:$IMAGE_TAG"
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Deployment successful!!"
